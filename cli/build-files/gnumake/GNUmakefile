# This file was automatically generated by bakefile.
#
# Any manual changes will be lost if it is regenerated,
# modify the source .bkl file instead if possible.

# You may define standard make variables such as CFLAGS or
# CXXFLAGS to affect the build. For example, you could use:
#
#      make CXXFLAGS=-g
#
# to build with debug information. The full list of variables
# that can be used by this makefile is:
# AR, CC, CFLAGS, CPPFLAGS, CXX, CXXFLAGS, LD, LDFLAGS, MAKE, RANLIB.

# You may also specify config=Debug|Release
# or their corresponding lower case variants on make command line to select
# the corresponding default flags values.
ifeq ($(config),debug)
override config := Debug
endif
ifeq ($(config),release)
override config := Release
endif
ifeq ($(config),Debug)
override CPPFLAGS += -DDEBUG
override CFLAGS += -g -O0
override CXXFLAGS += -g -O0
override LDFLAGS += -g
else ifeq ($(config),Release)
override CPPFLAGS += -DNDEBUG
override CFLAGS += -O2
override CXXFLAGS += -O2
else ifneq (,$(config))
$(warning Unknown configuration "$(config)")
endif
#
# Additionally, this makefile is customizable with the following
# settings:
#
#      ISHIKO_CPP_BASEPLATFORM_ROOT  Path to the Ishiko/C++ BasePlatform installation
#      ISHIKO_CPP_ERRORS_ROOT        Path to the Ishiko/C++ Errors installation
#      ISHIKO_CPP_BOOST_ROOT         Path to the Boost installation
#      ISHIKO_CPP_TYPES_ROOT         Path to the Ishiko/C++ Types installation
#      ISHIKO_CPP_TERMINAL_ROOT      Path to the Ishiko/C++ Terminal installation

# Use "make RANLIB=''" for platforms without ranlib.
RANLIB ?= ranlib

CC := cc
CXX := c++

# The directory for the build files, may be overridden on make command line.
builddir = .

ifneq ($(builddir),.)
_builddir := $(if $(findstring $(abspath $(builddir)),$(builddir)),,../../)$(builddir)/../gnumake/
_builddir_error := $(shell mkdir -p $(_builddir) 2>&1)
$(if $(_builddir_error),$(error Failed to create build directory: $(_builddir_error)))
endif

# ------------
# Configurable settings:
# 

# Path to the Ishiko/C++ BasePlatform installation
ISHIKO_CPP_BASEPLATFORM_ROOT ?= $(ISHIKO_CPP_ROOT)/base-platform
# Path to the Ishiko/C++ Errors installation
ISHIKO_CPP_ERRORS_ROOT ?= $(ISHIKO_CPP_ROOT)/errors
# Path to the Boost installation
ISHIKO_CPP_BOOST_ROOT ?= $(BOOST_ROOT)
# Path to the Ishiko/C++ Types installation
ISHIKO_CPP_TYPES_ROOT ?= $(ISHIKO_CPP_ROOT)/types
# Path to the Ishiko/C++ Terminal installation
ISHIKO_CPP_TERMINAL_ROOT ?= $(ISHIKO_CPP_ROOT)/terminal

# ------------

all: ../../../bin/CodeSmithyDebianRepositoryToolsCLI

../../../bin/CodeSmithyDebianRepositoryToolsCLI: $(_builddir)CodeSmithyDebianRepositoryToolsCLI_CommandLineSpecification.o $(_builddir)CodeSmithyDebianRepositoryToolsCLI_main.o
	@mkdir -p $(dir $@)
	$(CXX) -o $@ $(LDFLAGS) $(_builddir)CodeSmithyDebianRepositoryToolsCLI_CommandLineSpecification.o $(_builddir)CodeSmithyDebianRepositoryToolsCLI_main.o -L$(ISHIKO_CPP_BOOST_ROOT)/lib -L$(ISHIKO_CPP_TYPES_ROOT)/lib -L$(ISHIKO_CPP_TERMINAL_ROOT)/lib -L$(ISHIKO_CPP_BASEPLATFORM_ROOT)/lib -L$(ISHIKO_CPP_ERRORS_ROOT)/lib -pthread

$(_builddir)CodeSmithyDebianRepositoryToolsCLI_CommandLineSpecification.o: ../../src/CommandLineSpecification.cpp
	$(CXX) -c -o $@ $(CPPFLAGS) $(CXXFLAGS) -MD -MP -pthread -I$(ISHIKO_CPP_BOOST_ROOT)/include -I$(ISHIKO_CPP_TYPES_ROOT)/include -I$(ISHIKO_CPP_TERMINAL_ROOT)/include -I$(ISHIKO_CPP_BASEPLATFORM_ROOT)/include -I$(ISHIKO_CPP_ERRORS_ROOT)/include -std=c++11 ../../src/CommandLineSpecification.cpp

$(_builddir)CodeSmithyDebianRepositoryToolsCLI_main.o: ../../src/main.cpp
	$(CXX) -c -o $@ $(CPPFLAGS) $(CXXFLAGS) -MD -MP -pthread -I$(ISHIKO_CPP_BOOST_ROOT)/include -I$(ISHIKO_CPP_TYPES_ROOT)/include -I$(ISHIKO_CPP_TERMINAL_ROOT)/include -I$(ISHIKO_CPP_BASEPLATFORM_ROOT)/include -I$(ISHIKO_CPP_ERRORS_ROOT)/include -std=c++11 ../../src/main.cpp

clean:
	rm -f $(_builddir)*.o
	rm -f $(_builddir)*.d
	rm -f ../../../bin/CodeSmithyDebianRepositoryToolsCLI

.PHONY: all clean

# Dependencies tracking:
-include $(_builddir)*.d
